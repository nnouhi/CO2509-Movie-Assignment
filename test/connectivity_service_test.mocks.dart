// Mocks generated by Mockito 5.3.2 from annotations
// in co2509_assignment/test/connectivity_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:co2509_assignment/controllers/app_manager.dart' as _i5;
import 'package:co2509_assignment/models/pages.dart' as _i6;
import 'package:co2509_assignment/services/connectivity_service.dart' as _i2;
import 'package:connectivity_plus/connectivity_plus.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ConnectivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityService extends _i1.Mock
    implements _i2.ConnectivityService {
  MockConnectivityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);
  @override
  set isInitialized(bool? _isInitialized) => super.noSuchMethod(
        Invocation.setter(
          #isInitialized,
          _isInitialized,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Function get onConnectivityEstablishedCallbackFavouriteMovies =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityEstablishedCallbackFavouriteMovies),
        returnValue: () {},
      ) as Function);
  @override
  Function get onConnectivityEstablishedCallbackLandingPage =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityEstablishedCallbackLandingPage),
        returnValue: () {},
      ) as Function);
  @override
  Function get onConnectivityEstablishedCallbackMainPage => (super.noSuchMethod(
        Invocation.getter(#onConnectivityEstablishedCallbackMainPage),
        returnValue: () {},
      ) as Function);
  @override
  Function get onConnectivityLostCallbackFavouriteMovies => (super.noSuchMethod(
        Invocation.getter(#onConnectivityLostCallbackFavouriteMovies),
        returnValue: () {},
      ) as Function);
  @override
  Function get onConnectivityLostCallbackLandingPage => (super.noSuchMethod(
        Invocation.getter(#onConnectivityLostCallbackLandingPage),
        returnValue: () {},
      ) as Function);
  @override
  Function get onConnectivityLostCallbackMainPage => (super.noSuchMethod(
        Invocation.getter(#onConnectivityLostCallbackMainPage),
        returnValue: () {},
      ) as Function);
  @override
  void subscribe() => super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setOnConnectivityEstablishedCallback(Function? callback) =>
      super.noSuchMethod(
        Invocation.method(
          #setOnConnectivityEstablishedCallback,
          [callback],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setOnConnectivityLostCallback(Function? callback) => super.noSuchMethod(
        Invocation.method(
          #setOnConnectivityLostCallback,
          [callback],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onConnectivityChanged(_i3.ConnectivityResult? currentResult) =>
      super.noSuchMethod(
        Invocation.method(
          #onConnectivityChanged,
          [currentResult],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<bool> isConnected() => (super.noSuchMethod(
        Invocation.method(
          #isConnected,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  void handleEstablishedConnection() => super.noSuchMethod(
        Invocation.method(
          #handleEstablishedConnection,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void handleLossOfConnection() => super.noSuchMethod(
        Invocation.method(
          #handleLossOfConnection,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i3.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i3.ConnectivityResult> get onConnectivityChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i4.Stream<_i3.ConnectivityResult>.empty(),
      ) as _i4.Stream<_i3.ConnectivityResult>);
  @override
  _i4.Future<_i3.ConnectivityResult> checkConnectivity() => (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i4.Future<_i3.ConnectivityResult>.value(
            _i3.ConnectivityResult.bluetooth),
      ) as _i4.Future<_i3.ConnectivityResult>);
}

/// A class which mocks [AppManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppManager extends _i1.Mock implements _i5.AppManager {
  MockAppManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool getFavouriteMoviesDirtyState() => (super.noSuchMethod(
        Invocation.method(
          #getFavouriteMoviesDirtyState,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  void setFavouriteMoviesAsDirty(bool? isDirty) => super.noSuchMethod(
        Invocation.method(
          #setFavouriteMoviesAsDirty,
          [isDirty],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool getMainPageDirtyState() => (super.noSuchMethod(
        Invocation.method(
          #getMainPageDirtyState,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  void setMainPageAsDirty(bool? isDirty) => super.noSuchMethod(
        Invocation.method(
          #setMainPageAsDirty,
          [isDirty],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool getLandingPageDirtyState() => (super.noSuchMethod(
        Invocation.method(
          #getLandingPageDirtyState,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  void setLandingPageAsDirty(bool? isDirty) => super.noSuchMethod(
        Invocation.method(
          #setLandingPageAsDirty,
          [isDirty],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Pages getCurrentPage() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentPage,
          [],
        ),
        returnValue: _i6.Pages.LandingPage,
      ) as _i6.Pages);
  @override
  void setCurrentPage(_i6.Pages? page) => super.noSuchMethod(
        Invocation.method(
          #setCurrentPage,
          [page],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isConnected() => (super.noSuchMethod(
        Invocation.method(
          #isConnected,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  void setConnectionState(_i3.ConnectivityResult? connectivityResult) =>
      super.noSuchMethod(
        Invocation.method(
          #setConnectionState,
          [connectivityResult],
        ),
        returnValueForMissingStub: null,
      );
}
