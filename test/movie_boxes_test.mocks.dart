// Mocks generated by Mockito 5.3.2 from annotations
// in co2509_assignment/test/movie_boxes_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:co2509_assignment/controllers/app_manager.dart' as _i2;
import 'package:co2509_assignment/entities/movie_categories.dart' as _i8;
import 'package:co2509_assignment/entities/offline_movies.dart' as _i9;
import 'package:co2509_assignment/models/app_config.dart' as _i10;
import 'package:co2509_assignment/models/movie.dart' as _i6;
import 'package:co2509_assignment/models/pages.dart' as _i3;
import 'package:co2509_assignment/services/database_service.dart' as _i5;
import 'package:connectivity_plus/connectivity_plus.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AppManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppManager extends _i1.Mock implements _i2.AppManager {
  MockAppManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool getFavouriteMoviesDirtyState() => (super.noSuchMethod(
        Invocation.method(
          #getFavouriteMoviesDirtyState,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  void setFavouriteMoviesAsDirty(bool? isDirty) => super.noSuchMethod(
        Invocation.method(
          #setFavouriteMoviesAsDirty,
          [isDirty],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool getMainPageDirtyState() => (super.noSuchMethod(
        Invocation.method(
          #getMainPageDirtyState,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  void setMainPageAsDirty(bool? isDirty) => super.noSuchMethod(
        Invocation.method(
          #setMainPageAsDirty,
          [isDirty],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool getLandingPageDirtyState() => (super.noSuchMethod(
        Invocation.method(
          #getLandingPageDirtyState,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  void setLandingPageAsDirty(bool? isDirty) => super.noSuchMethod(
        Invocation.method(
          #setLandingPageAsDirty,
          [isDirty],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Pages getCurrentPage() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentPage,
          [],
        ),
        returnValue: _i3.Pages.LandingPage,
      ) as _i3.Pages);
  @override
  void setCurrentPage(_i3.Pages? page) => super.noSuchMethod(
        Invocation.method(
          #setCurrentPage,
          [page],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isConnected() => (super.noSuchMethod(
        Invocation.method(
          #isConnected,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  void setConnectionState(_i4.ConnectivityResult? connectivityResult) =>
      super.noSuchMethod(
        Invocation.method(
          #setConnectionState,
          [connectivityResult],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i5.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i6.Movie> getFavouriteMoviesFromMap() => (super.noSuchMethod(
        Invocation.method(
          #getFavouriteMoviesFromMap,
          [],
        ),
        returnValue: <_i6.Movie>[],
      ) as List<_i6.Movie>);
  @override
  _i7.Future<List<_i6.Movie>> getFavouriteMovies() => (super.noSuchMethod(
        Invocation.method(
          #getFavouriteMovies,
          [],
        ),
        returnValue: _i7.Future<List<_i6.Movie>>.value(<_i6.Movie>[]),
      ) as _i7.Future<List<_i6.Movie>>);
  @override
  _i7.Future<void> addFavouriteMovie(_i6.Movie? movie) => (super.noSuchMethod(
        Invocation.method(
          #addFavouriteMovie,
          [movie],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> removeMovieFromFavourites(_i6.Movie? movie) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeMovieFromFavourites,
          [movie],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> deleteAllFavouriteMovies() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllFavouriteMovies,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> addMovieCategory(_i8.MovieCategories? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMovieCategory,
          [category],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<List<_i8.MovieCategories>> getMovieCategories() =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieCategories,
          [],
        ),
        returnValue: _i7.Future<List<_i8.MovieCategories>>.value(
            <_i8.MovieCategories>[]),
      ) as _i7.Future<List<_i8.MovieCategories>>);
  @override
  _i7.Future<void> addOfflineMovies(List<_i9.OfflineMovies>? movies) =>
      (super.noSuchMethod(
        Invocation.method(
          #addOfflineMovies,
          [movies],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> deleteAllOfflineMovies() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllOfflineMovies,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<List<_i9.OfflineMovies>> getAllOfflineMovies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllOfflineMovies,
          [],
        ),
        returnValue:
            _i7.Future<List<_i9.OfflineMovies>>.value(<_i9.OfflineMovies>[]),
      ) as _i7.Future<List<_i9.OfflineMovies>>);
  @override
  _i7.Future<List<_i9.OfflineMovies>> getOfflineMovies(int? categoryId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOfflineMovies,
          [categoryId],
        ),
        returnValue:
            _i7.Future<List<_i9.OfflineMovies>>.value(<_i9.OfflineMovies>[]),
      ) as _i7.Future<List<_i9.OfflineMovies>>);
  @override
  bool existsInFavourites(int? id) => (super.noSuchMethod(
        Invocation.method(
          #existsInFavourites,
          [id],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [AppConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppConfig extends _i1.Mock implements _i10.AppConfig {
  MockAppConfig() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get apiKey => (super.noSuchMethod(
        Invocation.getter(#apiKey),
        returnValue: '',
      ) as String);
  @override
  String get baseApiUrl => (super.noSuchMethod(
        Invocation.getter(#baseApiUrl),
        returnValue: '',
      ) as String);
  @override
  String get baseImageUrl => (super.noSuchMethod(
        Invocation.getter(#baseImageUrl),
        returnValue: '',
      ) as String);
  @override
  String get imageNotFoundUrl => (super.noSuchMethod(
        Invocation.getter(#imageNotFoundUrl),
        returnValue: '',
      ) as String);
}
